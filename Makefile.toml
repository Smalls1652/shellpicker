env_scripts = [
# Parse and set 'BUILD_TARGET' environment variable.
'''
#!@duckscript

input_target = get_env BUILD_TARGET

if is_empty ${input_target}
    input_target = get_env CARGO_MAKE_RUST_TARGET_TRIPLE
end

set_env BUILD_TARGET ${input_target}
''',
# Parse and set 'BUILD_PACKAGE_NAME' environment variable.
'''
#!@duckscript

task_name = get_env CARGO_MAKE_TASK

if not equals ${task_name} "build-package" ||  not equals ${task_name} "build-package-target" || not equals ${task_name} "build-package-release"
    return
end

input_package = get_env BUILD_PACKAGE_NAME
input_package_arg = array_get ${@} 0

if not is_empty ${input_package_arg}
    input_package = set "${input_package_arg}"
end

if is_empty ${input_package}
    input_package = get_env DEFAULT_PACKAGE_NAME
end

set_env BUILD_PACKAGE_NAME ${input_package}
'''
]

[env]
DEFAULT_PACKAGE_NAME = "shellpicker"
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true

# Overrides

## Run test.
[tasks.test]
args = ["test", "--", "--show-output"]

# Core

## Format code.
[tasks.rustfmt]
category = "core"
description = "Format code"

command = "cargo"
args = ["--verbose", "fmt"]

## Build a package in the workspace.
[tasks.build-package]
category = "core"
description = "Build a package in the workspace."
workspace = false

command = "cargo"
args = ["build", "--package=${BUILD_PACKAGE_NAME}"]

## Build a package in the workspace for a specific target.
[tasks.build-package-target]
category = "core"
description = "Build a package in the workspace for a specific target."
workspace = false

command = "cargo"
args = ["build", "--package=${BUILD_PACKAGE_NAME}", "--target=${BUILD_TARGET}"]

## Build a package in the workspace in release mode.
[tasks.build-package-release]
category = "core"
description = "Build a package in the workspace in release mode."
workspace = false

command = "cargo"
args = ["build", "--package=${BUILD_PACKAGE_NAME}", "--target=${BUILD_TARGET}", "--release"]

## Build a 'shellpicker' with artifacts.
[tasks.build-artifacts]
category = "core"
description = "Build a 'shellpicker' with artifacts."
workspace = false

dependencies = ["build-package-release"]

script = '''
[[ -d "./artifacts" ]] && rm -rf "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/artifacts" && mkdir artifacts

echo "\ttarget/${BUILD_TARGET}/release/sp -> artifacts/sp"
cp "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/${BUILD_TARGET}/release/sp" "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/artifacts/sp"
'''

[tasks.build-artifacts.env]
BUILD_PACKAGE_NAME = "shellpicker"

## Install 'shellpicker' to local profile.
[tasks.install-to-profile]
category = "core"
description = "Install to local profile."
workspace = false

dependencies = ["build-artifacts"]

script = '''
[[ ! -d "${HOME}/.local/bin" ]] && mkdir -p "${HOME}/.local/bin"

[[ -f "${HOME}/.local/bin/sp" ]] && echo "\tRemove file -> ${HOME}/.local/bin/sp" && rm -f "${HOME}/.local/bin/sp"

echo "\tartifacts/sp -> ${HOME}/.local/bin/sp"
cp -f "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/artifacts/sp" "${HOME}/.local/bin/sp"
'''
